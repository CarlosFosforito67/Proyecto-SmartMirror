# ============================
# Aguilar Bueno Carlos Antonio
# Garcia Mora Maribel
# Aguilera Rangel Andre Mauricio
# Ortiz Perez Pablo Alexis
# ============================

import network        # M√≥dulo para manejar conexiones WiFi
import time           # M√≥dulo para pausas, temporizadores y control de tiempo
import dht            # M√≥dulo para el sensor DHT11 (temperatura y humedad)
from machine import Pin, time_pulse_us  # Control de pines GPIO y medir duraci√≥n de pulsos
from umqtt.simple import MQTTClient     # Cliente MQTT para enviar datos al broker

# === Configuraci√≥n de red WiFi ===
SSID = ""                        # Nombre de la red WiFi
PASSWORD = " "                 # Contrase√±a de la red WiFi

# === Configuraci√≥n del broker MQTT ===
MQTT_BROKER = "broker.hivemq.com"             # Direcci√≥n del broker MQTT p√∫blico (HiveMQ)
MQTT_PORT = 1883                              # Puerto est√°ndar para MQTT sin TLS
CLIENT_ID = "esp32_smartmirror"               # Identificador √∫nico del cliente MQTT

# === Definici√≥n de pines ===
sensor_luz = Pin(35, Pin.IN)                  # Sensor de luz conectado al pin 35
sensor_dht = dht.DHT11(Pin(21))               # Sensor DHT11 (temp/humedad) conectado al pin 21
trig = Pin(32, Pin.OUT)                       # Pin de disparo del sensor ultras√≥nico (HC-SR04)
echo = Pin(33, Pin.IN)                        # Pin de eco del sensor ultras√≥nico
rele_foco = Pin(26, Pin.OUT)                  # Rel√© que controla un foco/luz conectado al pin 26
rele_foco.value(1)                            # Apaga el foco inicialmente (estado alto = apagado)

# === Funci√≥n para conectar a WiFi ===
def conectar_wifi():
    wlan = network.WLAN(network.STA_IF)       # Se crea una interfaz WiFi en modo cliente (estaci√≥n)
    wlan.active(True)                         # Activa la interfaz WiFi
    wlan.connect(SSID, PASSWORD)              # Intenta conectarse a la red
    print("üîå Conectando a WiFi...", end="")
    while not wlan.isconnected():             # Espera hasta que se conecte
        print(".", end="")
        time.sleep(0.5)
    print("\n‚úÖ Conectado:", wlan.ifconfig()) # Muestra la IP asignada

# === Funci√≥n para medir distancia en cent√≠metros con el sensor ultras√≥nico ===
def medir_distancia_cm():
    trig.value(0)                             # Asegura que el pulso comience en bajo
    time.sleep_us(2)                          # Espera 2 microsegundos
    trig.value(1)                             # Env√≠a un pulso de 10 microsegundos
    time.sleep_us(10)
    trig.value(0)
    duracion = time_pulse_us(echo, 1, 30000)  # Mide cu√°nto tarda el eco en volver (hasta 30 ms)
    return (duracion / 2) / 29.1              # Convierte microsegundos a cent√≠metros

# === Inicia la conexi√≥n WiFi y MQTT ===
conectar_wifi()                                           # Se conecta al WiFi
cliente = MQTTClient(CLIENT_ID, MQTT_BROKER, port=MQTT_PORT)  # Crea el cliente MQTT
cliente.connect()                                         # Conecta al broker MQTT
print("‚úÖ MQTT conectado")                                # Confirma la conexi√≥n

# === Control de tiempo para medir DHT11 solo cada 5 segundos ===
ultimo_envio_dht = time.ticks_ms()                       # Guarda el tiempo actual

# === Bucle principal del programa ===
while True:
    try:
        distancia = medir_distancia_cm()                 # Mide la distancia del sensor ultras√≥nico
        print(f"üìè Distancia: {distancia:.1f} cm")        # Imprime la distancia

        if distancia <= 20:                              # Si alguien est√° a 20 cm o menos
            luz = sensor_luz.value()                     # Lee el valor del sensor de luz (0 = hay luz)
            estado_luz = "Detectada" if luz == 0 else "No detectada"
            cliente.publish("smartmirror/luz", estado_luz)  # Publica el estado de la luz

            if luz == 0:
                print("üí° Hay luz ‚Üí Encender foco")
                rele_foco.value(0)                        # Enciende el foco (rele en bajo)
            else:
                print("üåë No hay luz ‚Üí Apagar foco")
                rele_foco.value(1)                        # Apaga el foco (rele en alto)

            # Controla que solo se mida temperatura y humedad cada 5 segundos
            ahora = time.ticks_ms()
            if time.ticks_diff(ahora, ultimo_envio_dht) >= 5000:
                sensor_dht.measure()                     # Mide con el DHT11
                temp = sensor_dht.temperature()          # Lee la temperatura
                hum = sensor_dht.humidity()              # Lee la humedad
                cliente.publish("smartmirror/temperatura", str(temp))  # Publica temperatura
                cliente.publish("smartmirror/humedad", str(hum))       # Publica humedad
                print(f"üå° {temp}¬∞C  üíß {hum}%")
                ultimo_envio_dht = ahora                 # Actualiza el tiempo de la √∫ltima medici√≥n

        else:
            print("üö´ Nadie cerca ‚Üí Apagar foco")
            rele_foco.value(1)                            # Apaga el foco si no hay nadie

        time.sleep(0.5)                                   # Peque√±a pausa para estabilidad del loop

    except Exception as e:
        print("‚ö†Ô∏è Error:", e)                             # Muestra cualquier error ocurrido
        time.sleep(1)                                     # Espera antes de intentar de nuevo
